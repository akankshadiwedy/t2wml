start: value_expression
    | item_expression
    | boolean_equation
    | column_expression
    | row_expression
    | boolean_expression
    | eval_expression

!expression: cell_expression
       | value_expression
       | item_expression
       | STRING             -> expression_string
       | column_expression
       | row_expression
       | eval_expression

!eval_expression: "eval" "(" SYMBOL ("," value_expression)* ")"
               | "eval" "(" STRING ("," value_expression)* ")"

!value_expression: "value" "(" cell_expression ")"
                | "value" "(" boolean_equation ")"
                

!item_expression:  "item" "(" cell_expression ")"
                | "item" "(" boolean_equation ")"
                

!boolean_equation: boolean_expression "->" expression

boolean_expression: or_expression ("or" or_expression)*

!or_expression: and_expression ("and" and_expression)*

!and_expression: expression operator expression

!operator: "=" | "!=" | "contains" | "starts_with" | "ends_with"

!cell_expression: column_expression "/" row_expression
                | column_range_expression "/" row_expression
                | column_expression "/" row_range_expression

!column_range_expression: column_variable ":" column_variable
!row_range_expression: row_variable ":" row_variable

column_expression: column_variable (cell_operator cell_operator_argument)*
row_expression: row_variable (cell_operator cell_operator_argument)*

!cell_operator: "+" | "-"
cell_operator_argument: WHOLE_NUMBER | VARIABLE

!column_variable: VARIABLE | "$col" | "$left" | "$right"
!row_variable: WHOLE_NUMBER | "$row" | "$top" | "$bottom"


VARIABLE: LETTER+
SYMBOL: /[a-zA-Z_]+/
WHOLE_NUMBER: ("0".."9")+
%import common.ESCAPED_STRING   -> STRING
%import common.LETTER
%import common.WS
%ignore WS
